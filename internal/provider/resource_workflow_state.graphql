# @genqlient(for: "WorkflowState.description", pointer: true)
fragment WorkflowState on WorkflowState {
  id
  name
  color
  description
  type
  position
  team {
    id
  }
}

query getTeamWorkflowStates($key: String!) {
  workflowStates(filter: {
    team: {
      key: {
        eq: $key
      }
    }
  }) {
    nodes {
      ...WorkflowState
    }
  }
}

query getWorkflowState($id: String!) {
  workflowState(id: $id) {
    ...WorkflowState
  }
}

query findWorkflowState($name: String!, $key: String!) {
  workflowStates(filter: {
    name: {
      eq: $name
    },
    team: {
      key: {
        eq: $key
      }
    }
  }) {
    nodes {
      id
    }
  }
}

# @genqlient(for: "WorkflowStateCreateInput.id", omitempty: true)
# @genqlient(for: "WorkflowStateCreateInput.description", pointer: true)
mutation createWorkflowState(
  $input: WorkflowStateCreateInput!
) {
  workflowStateCreate(input: $input) {
    workflowState {
      ...WorkflowState
    }
  }
}

# @genqlient(for: "WorkflowStateUpdateInput.name", omitempty: true)
# @genqlient(for: "WorkflowStateUpdateInput.description", pointer: true)
# @genqlient(for: "WorkflowStateUpdateInput.color", omitempty: true)
# @genqlient(for: "WorkflowStateUpdateInput.position", omitempty: true)
mutation updateWorkflowState(
  $input: WorkflowStateUpdateInput!,
  $id: String!
) {
  workflowStateUpdate(input: $input, id: $id) {
    workflowState {
      ...WorkflowState
    }
  }
}

mutation deleteWorkflowState($id: String!) {
  workflowStateArchive(id: $id) {
    success
  }
}
