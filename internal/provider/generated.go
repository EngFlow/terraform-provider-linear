// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package provider

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type IssueLabelCreateInput struct {
	// The identifier. If none is provided, the backend will generate one.
	Id string `json:"id,omitempty"`
	// The name of the label.
	Name string `json:"name"`
	// The description of the label.
	Description string `json:"description,omitempty"`
	// The color of the label.
	Color string `json:"color,omitempty"`
	// The team associated with the label. If not given, the label will be associated with the entire workspace.
	TeamId string `json:"teamId,omitempty"`
}

// GetId returns IssueLabelCreateInput.Id, and is useful for accessing the field via an interface.
func (v *IssueLabelCreateInput) GetId() string { return v.Id }

// GetName returns IssueLabelCreateInput.Name, and is useful for accessing the field via an interface.
func (v *IssueLabelCreateInput) GetName() string { return v.Name }

// GetDescription returns IssueLabelCreateInput.Description, and is useful for accessing the field via an interface.
func (v *IssueLabelCreateInput) GetDescription() string { return v.Description }

// GetColor returns IssueLabelCreateInput.Color, and is useful for accessing the field via an interface.
func (v *IssueLabelCreateInput) GetColor() string { return v.Color }

// GetTeamId returns IssueLabelCreateInput.TeamId, and is useful for accessing the field via an interface.
func (v *IssueLabelCreateInput) GetTeamId() string { return v.TeamId }

type IssueLabelUpdateInput struct {
	// The name of the label.
	Name string `json:"name,omitempty"`
	// The description of the label.
	Description string `json:"description,omitempty"`
	// The color of the label.
	Color string `json:"color,omitempty"`
}

// GetName returns IssueLabelUpdateInput.Name, and is useful for accessing the field via an interface.
func (v *IssueLabelUpdateInput) GetName() string { return v.Name }

// GetDescription returns IssueLabelUpdateInput.Description, and is useful for accessing the field via an interface.
func (v *IssueLabelUpdateInput) GetDescription() string { return v.Description }

// GetColor returns IssueLabelUpdateInput.Color, and is useful for accessing the field via an interface.
func (v *IssueLabelUpdateInput) GetColor() string { return v.Color }

type TeamCreateInput struct {
	// The identifier. If none is provided, the backend will generate one.
	Id string `json:"id,omitempty"`
	// The name of the team.
	Name string `json:"name"`
	// The description of the team.
	Description string `json:"description,omitempty"`
	// The key of the team. If not given, the key will be generated based on the name of the team.
	Key string `json:"key"`
	// The icon of the team.
	Icon string `json:"icon,omitempty"`
	// The color of the team.
	Color string `json:"color,omitempty"`
	// The organization associated with the team.
	OrganizationId string `json:"organizationId,omitempty"`
	// Whether the team uses cycles.
	CyclesEnabled bool `json:"cyclesEnabled"`
	// The day of the week that a new cycle starts.
	CycleStartDay float64 `json:"cycleStartDay"`
	// The duration of each cycle in weeks.
	CycleDuration int `json:"cycleDuration"`
	// The cooldown time after each cycle in weeks.
	CycleCooldownTime int `json:"cycleCooldownTime"`
	// Auto assign started issues to current active cycle setting.
	CycleIssueAutoAssignStarted bool `json:"cycleIssueAutoAssignStarted"`
	// Auto assign completed issues to current active cycle setting.
	CycleIssueAutoAssignCompleted bool `json:"cycleIssueAutoAssignCompleted"`
	// Only allow issues issues with cycles in Active Issues.
	CycleLockToActive bool `json:"cycleLockToActive"`
	// How many upcoming cycles to create.
	UpcomingCycleCount float64 `json:"upcomingCycleCount"`
	// Whether triage mode is enabled for the team.
	TriageEnabled bool `json:"triageEnabled"`
	// The timezone of the team.
	Timezone string `json:"timezone"`
	// Whether issues without priority should be sorted first.
	IssueOrderingNoPriorityFirst bool `json:"issueOrderingNoPriorityFirst"`
	// The issue estimation type to use.
	IssueEstimationType string `json:"issueEstimationType"`
	// Whether to allow zeros in issues estimates.
	IssueEstimationAllowZero bool `json:"issueEstimationAllowZero"`
	// Whether to move issues to bottom of the column when changing state.
	IssueSortOrderDefaultToBottom bool `json:"issueSortOrderDefaultToBottom"`
	// Whether to add additional points to the estimate scale.
	IssueEstimationExtended bool `json:"issueEstimationExtended"`
	// What to use as an default estimate for unestimated issues.
	DefaultIssueEstimate float64 `json:"defaultIssueEstimate"`
	// Whether to group recent issue history entries.
	GroupIssueHistory bool `json:"groupIssueHistory"`
	// The identifier of the default template for members of this team.
	DefaultTemplateForMembersId string `json:"defaultTemplateForMembersId,omitempty"`
	// The identifier of the default template for non-members of this team.
	DefaultTemplateForNonMembersId string `json:"defaultTemplateForNonMembersId,omitempty"`
	// Internal. Whether the team is private or not.
	Private bool `json:"private"`
	// Period after which issues are automatically closed, in months.
	AutoClosePeriod float64 `json:"autoClosePeriod,omitempty"`
	// The canceled workflow state which auto closed issues will be set to.
	AutoCloseStateId string `json:"autoCloseStateId,omitempty"`
	// Period after which closed and completed issues are automatically archived, in months. 0 means disabled.
	AutoArchivePeriod float64 `json:"autoArchivePeriod"`
	// The workflow state into which issues are moved when they are marked as a duplicate of another issue.
	MarkedAsDuplicateWorkflowStateId string `json:"markedAsDuplicateWorkflowStateId,omitempty"`
}

// GetId returns TeamCreateInput.Id, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetId() string { return v.Id }

// GetName returns TeamCreateInput.Name, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetName() string { return v.Name }

// GetDescription returns TeamCreateInput.Description, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetDescription() string { return v.Description }

// GetKey returns TeamCreateInput.Key, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetKey() string { return v.Key }

// GetIcon returns TeamCreateInput.Icon, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetIcon() string { return v.Icon }

// GetColor returns TeamCreateInput.Color, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetColor() string { return v.Color }

// GetOrganizationId returns TeamCreateInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetOrganizationId() string { return v.OrganizationId }

// GetCyclesEnabled returns TeamCreateInput.CyclesEnabled, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetCyclesEnabled() bool { return v.CyclesEnabled }

// GetCycleStartDay returns TeamCreateInput.CycleStartDay, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetCycleStartDay() float64 { return v.CycleStartDay }

// GetCycleDuration returns TeamCreateInput.CycleDuration, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetCycleDuration() int { return v.CycleDuration }

// GetCycleCooldownTime returns TeamCreateInput.CycleCooldownTime, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetCycleCooldownTime() int { return v.CycleCooldownTime }

// GetCycleIssueAutoAssignStarted returns TeamCreateInput.CycleIssueAutoAssignStarted, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetCycleIssueAutoAssignStarted() bool { return v.CycleIssueAutoAssignStarted }

// GetCycleIssueAutoAssignCompleted returns TeamCreateInput.CycleIssueAutoAssignCompleted, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetCycleIssueAutoAssignCompleted() bool {
	return v.CycleIssueAutoAssignCompleted
}

// GetCycleLockToActive returns TeamCreateInput.CycleLockToActive, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetCycleLockToActive() bool { return v.CycleLockToActive }

// GetUpcomingCycleCount returns TeamCreateInput.UpcomingCycleCount, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetUpcomingCycleCount() float64 { return v.UpcomingCycleCount }

// GetTriageEnabled returns TeamCreateInput.TriageEnabled, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetTriageEnabled() bool { return v.TriageEnabled }

// GetTimezone returns TeamCreateInput.Timezone, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetTimezone() string { return v.Timezone }

// GetIssueOrderingNoPriorityFirst returns TeamCreateInput.IssueOrderingNoPriorityFirst, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetIssueOrderingNoPriorityFirst() bool {
	return v.IssueOrderingNoPriorityFirst
}

// GetIssueEstimationType returns TeamCreateInput.IssueEstimationType, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetIssueEstimationType() string { return v.IssueEstimationType }

// GetIssueEstimationAllowZero returns TeamCreateInput.IssueEstimationAllowZero, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetIssueEstimationAllowZero() bool { return v.IssueEstimationAllowZero }

// GetIssueSortOrderDefaultToBottom returns TeamCreateInput.IssueSortOrderDefaultToBottom, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetIssueSortOrderDefaultToBottom() bool {
	return v.IssueSortOrderDefaultToBottom
}

// GetIssueEstimationExtended returns TeamCreateInput.IssueEstimationExtended, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetIssueEstimationExtended() bool { return v.IssueEstimationExtended }

// GetDefaultIssueEstimate returns TeamCreateInput.DefaultIssueEstimate, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetDefaultIssueEstimate() float64 { return v.DefaultIssueEstimate }

// GetGroupIssueHistory returns TeamCreateInput.GroupIssueHistory, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetGroupIssueHistory() bool { return v.GroupIssueHistory }

// GetDefaultTemplateForMembersId returns TeamCreateInput.DefaultTemplateForMembersId, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetDefaultTemplateForMembersId() string {
	return v.DefaultTemplateForMembersId
}

// GetDefaultTemplateForNonMembersId returns TeamCreateInput.DefaultTemplateForNonMembersId, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetDefaultTemplateForNonMembersId() string {
	return v.DefaultTemplateForNonMembersId
}

// GetPrivate returns TeamCreateInput.Private, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetPrivate() bool { return v.Private }

// GetAutoClosePeriod returns TeamCreateInput.AutoClosePeriod, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetAutoClosePeriod() float64 { return v.AutoClosePeriod }

// GetAutoCloseStateId returns TeamCreateInput.AutoCloseStateId, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetAutoCloseStateId() string { return v.AutoCloseStateId }

// GetAutoArchivePeriod returns TeamCreateInput.AutoArchivePeriod, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetAutoArchivePeriod() float64 { return v.AutoArchivePeriod }

// GetMarkedAsDuplicateWorkflowStateId returns TeamCreateInput.MarkedAsDuplicateWorkflowStateId, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetMarkedAsDuplicateWorkflowStateId() string {
	return v.MarkedAsDuplicateWorkflowStateId
}

type TeamUpdateInput struct {
	// The name of the team.
	Name string `json:"name"`
	// The description of the team.
	Description string `json:"description,omitempty"`
	// The key of the team.
	Key string `json:"key,omitempty"`
	// The icon of the team.
	Icon string `json:"icon,omitempty"`
	// The color of the team.
	Color string `json:"color,omitempty"`
	// Whether the team uses cycles.
	CyclesEnabled bool `json:"cyclesEnabled"`
	// The day of the week that a new cycle starts.
	CycleStartDay float64 `json:"cycleStartDay"`
	// The duration of each cycle in weeks.
	CycleDuration int `json:"cycleDuration"`
	// The cooldown time after each cycle in weeks.
	CycleCooldownTime int `json:"cycleCooldownTime"`
	// Auto assign started issues to current active cycle setting.
	CycleIssueAutoAssignStarted bool `json:"cycleIssueAutoAssignStarted"`
	// Auto assign completed issues to current active cycle setting.
	CycleIssueAutoAssignCompleted bool `json:"cycleIssueAutoAssignCompleted"`
	// Only allow issues with cycles in Active Issues.
	CycleLockToActive bool `json:"cycleLockToActive"`
	// Whether the first cycle should start in the current or the next week.
	CycleEnabledStartWeek string `json:"cycleEnabledStartWeek"`
	// How many upcoming cycles to create.
	UpcomingCycleCount float64 `json:"upcomingCycleCount"`
	// The timezone of the team.
	Timezone string `json:"timezone"`
	// Whether issues without priority should be sorted first.
	IssueOrderingNoPriorityFirst bool `json:"issueOrderingNoPriorityFirst"`
	// The issue estimation type to use.
	IssueEstimationType string `json:"issueEstimationType"`
	// Whether to allow zeros in issues estimates.
	IssueEstimationAllowZero bool `json:"issueEstimationAllowZero"`
	// Whether to move issues to bottom of the column when changing state.
	IssueSortOrderDefaultToBottom bool `json:"issueSortOrderDefaultToBottom"`
	// Whether to add additional points to the estimate scale.
	IssueEstimationExtended bool `json:"issueEstimationExtended"`
	// What to use as an default estimate for unestimated issues.
	DefaultIssueEstimate float64 `json:"defaultIssueEstimate"`
	// The workflow state into which issues are moved when a draft PR has been opened.
	DraftWorkflowStateId string `json:"draftWorkflowStateId,omitempty"`
	// The workflow state into which issues are moved when a PR has been opened.
	StartWorkflowStateId string `json:"startWorkflowStateId,omitempty"`
	// The workflow state into which issues are moved when a review has been requested for the PR.
	ReviewWorkflowStateId string `json:"reviewWorkflowStateId,omitempty"`
	// The workflow state into which issues are moved when a PR has been merged.
	MergeWorkflowStateId string `json:"mergeWorkflowStateId,omitempty"`
	// Whether to send new issue notifications to Slack.
	SlackNewIssue bool `json:"slackNewIssue"`
	// Whether to send new issue comment notifications to Slack.
	SlackIssueComments bool `json:"slackIssueComments"`
	// Whether to send issue status update notifications to Slack.
	SlackIssueStatuses bool `json:"slackIssueStatuses"`
	// Whether to group recent issue history entries.
	GroupIssueHistory bool `json:"groupIssueHistory"`
	// The identifier of the default template for members of this team.
	DefaultTemplateForMembersId string `json:"defaultTemplateForMembersId,omitempty"`
	// The identifier of the default template for non-members of this team.
	DefaultTemplateForNonMembersId string `json:"defaultTemplateForNonMembersId,omitempty"`
	// Whether the team is private or not.
	Private bool `json:"private"`
	// Whether triage mode is enabled for the team.
	TriageEnabled bool `json:"triageEnabled"`
	// Default status for newly created issues.
	DefaultIssueStateId string `json:"defaultIssueStateId,omitempty"`
	// Period after which issues are automatically closed, in months.
	AutoClosePeriod float64 `json:"autoClosePeriod,omitempty"`
	// The canceled workflow state which auto closed issues will be set to.
	AutoCloseStateId string `json:"autoCloseStateId,omitempty"`
	// Period after which closed and completed issues are automatically archived, in months.
	AutoArchivePeriod float64 `json:"autoArchivePeriod"`
	// The workflow state into which issues are moved when they are marked as a duplicate of another issue.
	MarkedAsDuplicateWorkflowStateId string `json:"markedAsDuplicateWorkflowStateId,omitempty"`
}

// GetName returns TeamUpdateInput.Name, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetName() string { return v.Name }

// GetDescription returns TeamUpdateInput.Description, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetDescription() string { return v.Description }

// GetKey returns TeamUpdateInput.Key, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetKey() string { return v.Key }

// GetIcon returns TeamUpdateInput.Icon, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetIcon() string { return v.Icon }

// GetColor returns TeamUpdateInput.Color, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetColor() string { return v.Color }

// GetCyclesEnabled returns TeamUpdateInput.CyclesEnabled, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetCyclesEnabled() bool { return v.CyclesEnabled }

// GetCycleStartDay returns TeamUpdateInput.CycleStartDay, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetCycleStartDay() float64 { return v.CycleStartDay }

// GetCycleDuration returns TeamUpdateInput.CycleDuration, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetCycleDuration() int { return v.CycleDuration }

// GetCycleCooldownTime returns TeamUpdateInput.CycleCooldownTime, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetCycleCooldownTime() int { return v.CycleCooldownTime }

// GetCycleIssueAutoAssignStarted returns TeamUpdateInput.CycleIssueAutoAssignStarted, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetCycleIssueAutoAssignStarted() bool { return v.CycleIssueAutoAssignStarted }

// GetCycleIssueAutoAssignCompleted returns TeamUpdateInput.CycleIssueAutoAssignCompleted, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetCycleIssueAutoAssignCompleted() bool {
	return v.CycleIssueAutoAssignCompleted
}

// GetCycleLockToActive returns TeamUpdateInput.CycleLockToActive, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetCycleLockToActive() bool { return v.CycleLockToActive }

// GetCycleEnabledStartWeek returns TeamUpdateInput.CycleEnabledStartWeek, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetCycleEnabledStartWeek() string { return v.CycleEnabledStartWeek }

// GetUpcomingCycleCount returns TeamUpdateInput.UpcomingCycleCount, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetUpcomingCycleCount() float64 { return v.UpcomingCycleCount }

// GetTimezone returns TeamUpdateInput.Timezone, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetTimezone() string { return v.Timezone }

// GetIssueOrderingNoPriorityFirst returns TeamUpdateInput.IssueOrderingNoPriorityFirst, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetIssueOrderingNoPriorityFirst() bool {
	return v.IssueOrderingNoPriorityFirst
}

// GetIssueEstimationType returns TeamUpdateInput.IssueEstimationType, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetIssueEstimationType() string { return v.IssueEstimationType }

// GetIssueEstimationAllowZero returns TeamUpdateInput.IssueEstimationAllowZero, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetIssueEstimationAllowZero() bool { return v.IssueEstimationAllowZero }

// GetIssueSortOrderDefaultToBottom returns TeamUpdateInput.IssueSortOrderDefaultToBottom, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetIssueSortOrderDefaultToBottom() bool {
	return v.IssueSortOrderDefaultToBottom
}

// GetIssueEstimationExtended returns TeamUpdateInput.IssueEstimationExtended, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetIssueEstimationExtended() bool { return v.IssueEstimationExtended }

// GetDefaultIssueEstimate returns TeamUpdateInput.DefaultIssueEstimate, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetDefaultIssueEstimate() float64 { return v.DefaultIssueEstimate }

// GetDraftWorkflowStateId returns TeamUpdateInput.DraftWorkflowStateId, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetDraftWorkflowStateId() string { return v.DraftWorkflowStateId }

// GetStartWorkflowStateId returns TeamUpdateInput.StartWorkflowStateId, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetStartWorkflowStateId() string { return v.StartWorkflowStateId }

// GetReviewWorkflowStateId returns TeamUpdateInput.ReviewWorkflowStateId, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetReviewWorkflowStateId() string { return v.ReviewWorkflowStateId }

// GetMergeWorkflowStateId returns TeamUpdateInput.MergeWorkflowStateId, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetMergeWorkflowStateId() string { return v.MergeWorkflowStateId }

// GetSlackNewIssue returns TeamUpdateInput.SlackNewIssue, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetSlackNewIssue() bool { return v.SlackNewIssue }

// GetSlackIssueComments returns TeamUpdateInput.SlackIssueComments, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetSlackIssueComments() bool { return v.SlackIssueComments }

// GetSlackIssueStatuses returns TeamUpdateInput.SlackIssueStatuses, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetSlackIssueStatuses() bool { return v.SlackIssueStatuses }

// GetGroupIssueHistory returns TeamUpdateInput.GroupIssueHistory, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetGroupIssueHistory() bool { return v.GroupIssueHistory }

// GetDefaultTemplateForMembersId returns TeamUpdateInput.DefaultTemplateForMembersId, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetDefaultTemplateForMembersId() string {
	return v.DefaultTemplateForMembersId
}

// GetDefaultTemplateForNonMembersId returns TeamUpdateInput.DefaultTemplateForNonMembersId, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetDefaultTemplateForNonMembersId() string {
	return v.DefaultTemplateForNonMembersId
}

// GetPrivate returns TeamUpdateInput.Private, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetPrivate() bool { return v.Private }

// GetTriageEnabled returns TeamUpdateInput.TriageEnabled, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetTriageEnabled() bool { return v.TriageEnabled }

// GetDefaultIssueStateId returns TeamUpdateInput.DefaultIssueStateId, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetDefaultIssueStateId() string { return v.DefaultIssueStateId }

// GetAutoClosePeriod returns TeamUpdateInput.AutoClosePeriod, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetAutoClosePeriod() float64 { return v.AutoClosePeriod }

// GetAutoCloseStateId returns TeamUpdateInput.AutoCloseStateId, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetAutoCloseStateId() string { return v.AutoCloseStateId }

// GetAutoArchivePeriod returns TeamUpdateInput.AutoArchivePeriod, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetAutoArchivePeriod() float64 { return v.AutoArchivePeriod }

// GetMarkedAsDuplicateWorkflowStateId returns TeamUpdateInput.MarkedAsDuplicateWorkflowStateId, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetMarkedAsDuplicateWorkflowStateId() string {
	return v.MarkedAsDuplicateWorkflowStateId
}

type WorkflowStateCreateInput struct {
	// The identifier. If none is provided, the backend will generate one.
	Id string `json:"id,omitempty"`
	// The workflow type.
	Type string `json:"type"`
	// The name of the state.
	Name string `json:"name"`
	// The color of the state.
	Color string `json:"color"`
	// The description of the state.
	Description string `json:"description,omitempty"`
	// The position of the state.
	Position float64 `json:"position,omitempty"`
	// The team associated with the state.
	TeamId string `json:"teamId"`
}

// GetId returns WorkflowStateCreateInput.Id, and is useful for accessing the field via an interface.
func (v *WorkflowStateCreateInput) GetId() string { return v.Id }

// GetType returns WorkflowStateCreateInput.Type, and is useful for accessing the field via an interface.
func (v *WorkflowStateCreateInput) GetType() string { return v.Type }

// GetName returns WorkflowStateCreateInput.Name, and is useful for accessing the field via an interface.
func (v *WorkflowStateCreateInput) GetName() string { return v.Name }

// GetColor returns WorkflowStateCreateInput.Color, and is useful for accessing the field via an interface.
func (v *WorkflowStateCreateInput) GetColor() string { return v.Color }

// GetDescription returns WorkflowStateCreateInput.Description, and is useful for accessing the field via an interface.
func (v *WorkflowStateCreateInput) GetDescription() string { return v.Description }

// GetPosition returns WorkflowStateCreateInput.Position, and is useful for accessing the field via an interface.
func (v *WorkflowStateCreateInput) GetPosition() float64 { return v.Position }

// GetTeamId returns WorkflowStateCreateInput.TeamId, and is useful for accessing the field via an interface.
func (v *WorkflowStateCreateInput) GetTeamId() string { return v.TeamId }

type WorkflowStateUpdateInput struct {
	// The name of the state.
	Name string `json:"name,omitempty"`
	// The color of the state.
	Color string `json:"color,omitempty"`
	// The description of the state.
	Description string `json:"description,omitempty"`
	// The position of the state.
	Position float64 `json:"position,omitempty"`
}

// GetName returns WorkflowStateUpdateInput.Name, and is useful for accessing the field via an interface.
func (v *WorkflowStateUpdateInput) GetName() string { return v.Name }

// GetColor returns WorkflowStateUpdateInput.Color, and is useful for accessing the field via an interface.
func (v *WorkflowStateUpdateInput) GetColor() string { return v.Color }

// GetDescription returns WorkflowStateUpdateInput.Description, and is useful for accessing the field via an interface.
func (v *WorkflowStateUpdateInput) GetDescription() string { return v.Description }

// GetPosition returns WorkflowStateUpdateInput.Position, and is useful for accessing the field via an interface.
func (v *WorkflowStateUpdateInput) GetPosition() float64 { return v.Position }

// __createTeamInput is used internally by genqlient
type __createTeamInput struct {
	Input TeamCreateInput `json:"input"`
}

// GetInput returns __createTeamInput.Input, and is useful for accessing the field via an interface.
func (v *__createTeamInput) GetInput() TeamCreateInput { return v.Input }

// __createTeamLabelInput is used internally by genqlient
type __createTeamLabelInput struct {
	Input IssueLabelCreateInput `json:"input"`
}

// GetInput returns __createTeamLabelInput.Input, and is useful for accessing the field via an interface.
func (v *__createTeamLabelInput) GetInput() IssueLabelCreateInput { return v.Input }

// __createWorkflowStateInput is used internally by genqlient
type __createWorkflowStateInput struct {
	Input WorkflowStateCreateInput `json:"input"`
}

// GetInput returns __createWorkflowStateInput.Input, and is useful for accessing the field via an interface.
func (v *__createWorkflowStateInput) GetInput() WorkflowStateCreateInput { return v.Input }

// __createWorkspaceLabelInput is used internally by genqlient
type __createWorkspaceLabelInput struct {
	Input IssueLabelCreateInput `json:"input"`
}

// GetInput returns __createWorkspaceLabelInput.Input, and is useful for accessing the field via an interface.
func (v *__createWorkspaceLabelInput) GetInput() IssueLabelCreateInput { return v.Input }

// __deleteTeamInput is used internally by genqlient
type __deleteTeamInput struct {
	Key string `json:"key"`
}

// GetKey returns __deleteTeamInput.Key, and is useful for accessing the field via an interface.
func (v *__deleteTeamInput) GetKey() string { return v.Key }

// __deleteTeamLabelInput is used internally by genqlient
type __deleteTeamLabelInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteTeamLabelInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteTeamLabelInput) GetId() string { return v.Id }

// __deleteWorkspaceLabelInput is used internally by genqlient
type __deleteWorkspaceLabelInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteWorkspaceLabelInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteWorkspaceLabelInput) GetId() string { return v.Id }

// __findTeamLabelInput is used internally by genqlient
type __findTeamLabelInput struct {
	Name string `json:"name"`
	Key  string `json:"key"`
}

// GetName returns __findTeamLabelInput.Name, and is useful for accessing the field via an interface.
func (v *__findTeamLabelInput) GetName() string { return v.Name }

// GetKey returns __findTeamLabelInput.Key, and is useful for accessing the field via an interface.
func (v *__findTeamLabelInput) GetKey() string { return v.Key }

// __findWorkflowStateInput is used internally by genqlient
type __findWorkflowStateInput struct {
	Name string `json:"name"`
	Key  string `json:"key"`
}

// GetName returns __findWorkflowStateInput.Name, and is useful for accessing the field via an interface.
func (v *__findWorkflowStateInput) GetName() string { return v.Name }

// GetKey returns __findWorkflowStateInput.Key, and is useful for accessing the field via an interface.
func (v *__findWorkflowStateInput) GetKey() string { return v.Key }

// __findWorkspaceLabelInput is used internally by genqlient
type __findWorkspaceLabelInput struct {
	Name string `json:"name"`
}

// GetName returns __findWorkspaceLabelInput.Name, and is useful for accessing the field via an interface.
func (v *__findWorkspaceLabelInput) GetName() string { return v.Name }

// __getTeamInput is used internally by genqlient
type __getTeamInput struct {
	Key string `json:"key"`
}

// GetKey returns __getTeamInput.Key, and is useful for accessing the field via an interface.
func (v *__getTeamInput) GetKey() string { return v.Key }

// __getTeamLabelInput is used internally by genqlient
type __getTeamLabelInput struct {
	Id string `json:"id"`
}

// GetId returns __getTeamLabelInput.Id, and is useful for accessing the field via an interface.
func (v *__getTeamLabelInput) GetId() string { return v.Id }

// __getWorkflowStateInput is used internally by genqlient
type __getWorkflowStateInput struct {
	Id string `json:"id"`
}

// GetId returns __getWorkflowStateInput.Id, and is useful for accessing the field via an interface.
func (v *__getWorkflowStateInput) GetId() string { return v.Id }

// __getWorkspaceLabelInput is used internally by genqlient
type __getWorkspaceLabelInput struct {
	Id string `json:"id"`
}

// GetId returns __getWorkspaceLabelInput.Id, and is useful for accessing the field via an interface.
func (v *__getWorkspaceLabelInput) GetId() string { return v.Id }

// __updateTeamInput is used internally by genqlient
type __updateTeamInput struct {
	Input TeamUpdateInput `json:"input"`
	Id    string          `json:"id"`
}

// GetInput returns __updateTeamInput.Input, and is useful for accessing the field via an interface.
func (v *__updateTeamInput) GetInput() TeamUpdateInput { return v.Input }

// GetId returns __updateTeamInput.Id, and is useful for accessing the field via an interface.
func (v *__updateTeamInput) GetId() string { return v.Id }

// __updateTeamLabelInput is used internally by genqlient
type __updateTeamLabelInput struct {
	Input IssueLabelUpdateInput `json:"input"`
	Id    string                `json:"id"`
}

// GetInput returns __updateTeamLabelInput.Input, and is useful for accessing the field via an interface.
func (v *__updateTeamLabelInput) GetInput() IssueLabelUpdateInput { return v.Input }

// GetId returns __updateTeamLabelInput.Id, and is useful for accessing the field via an interface.
func (v *__updateTeamLabelInput) GetId() string { return v.Id }

// __updateWorkflowStateInput is used internally by genqlient
type __updateWorkflowStateInput struct {
	Input WorkflowStateUpdateInput `json:"input"`
	Id    string                   `json:"id"`
}

// GetInput returns __updateWorkflowStateInput.Input, and is useful for accessing the field via an interface.
func (v *__updateWorkflowStateInput) GetInput() WorkflowStateUpdateInput { return v.Input }

// GetId returns __updateWorkflowStateInput.Id, and is useful for accessing the field via an interface.
func (v *__updateWorkflowStateInput) GetId() string { return v.Id }

// __updateWorkspaceLabelInput is used internally by genqlient
type __updateWorkspaceLabelInput struct {
	Input IssueLabelUpdateInput `json:"input"`
	Id    string                `json:"id"`
}

// GetInput returns __updateWorkspaceLabelInput.Input, and is useful for accessing the field via an interface.
func (v *__updateWorkspaceLabelInput) GetInput() IssueLabelUpdateInput { return v.Input }

// GetId returns __updateWorkspaceLabelInput.Id, and is useful for accessing the field via an interface.
func (v *__updateWorkspaceLabelInput) GetId() string { return v.Id }

// createTeamLabelIssueLabelCreateIssueLabelPayload includes the requested fields of the GraphQL type IssueLabelPayload.
type createTeamLabelIssueLabelCreateIssueLabelPayload struct {
	// The label that was created or updated.
	IssueLabel createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabel `json:"issueLabel"`
}

// GetIssueLabel returns createTeamLabelIssueLabelCreateIssueLabelPayload.IssueLabel, and is useful for accessing the field via an interface.
func (v *createTeamLabelIssueLabelCreateIssueLabelPayload) GetIssueLabel() createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabel {
	return v.IssueLabel
}

// createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabel includes the requested fields of the GraphQL type IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabel struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The label's name.
	Name string `json:"name"`
	// The label's description.
	Description string `json:"description"`
	// The label's color as a HEX string.
	Color string `json:"color"`
	// The team that the label is associated with. If null, the label is associated with the global workspace..
	Team createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabelTeam `json:"team"`
}

// GetId returns createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabel.Id, and is useful for accessing the field via an interface.
func (v *createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabel) GetId() string { return v.Id }

// GetName returns createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabel.Name, and is useful for accessing the field via an interface.
func (v *createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabel) GetName() string { return v.Name }

// GetDescription returns createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabel.Description, and is useful for accessing the field via an interface.
func (v *createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabel) GetDescription() string {
	return v.Description
}

// GetColor returns createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabel.Color, and is useful for accessing the field via an interface.
func (v *createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabel) GetColor() string {
	return v.Color
}

// GetTeam returns createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabel.Team, and is useful for accessing the field via an interface.
func (v *createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabel) GetTeam() createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabelTeam {
	return v.Team
}

// createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabelTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabelTeam struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabelTeam.Id, and is useful for accessing the field via an interface.
func (v *createTeamLabelIssueLabelCreateIssueLabelPayloadIssueLabelTeam) GetId() string { return v.Id }

// createTeamLabelResponse is returned by createTeamLabel on success.
type createTeamLabelResponse struct {
	// Creates a new label.
	IssueLabelCreate createTeamLabelIssueLabelCreateIssueLabelPayload `json:"issueLabelCreate"`
}

// GetIssueLabelCreate returns createTeamLabelResponse.IssueLabelCreate, and is useful for accessing the field via an interface.
func (v *createTeamLabelResponse) GetIssueLabelCreate() createTeamLabelIssueLabelCreateIssueLabelPayload {
	return v.IssueLabelCreate
}

// createTeamResponse is returned by createTeam on success.
type createTeamResponse struct {
	// Creates a new team. The user who creates the team will automatically be added as a member to the newly created team.
	TeamCreate createTeamTeamCreateTeamPayload `json:"teamCreate"`
}

// GetTeamCreate returns createTeamResponse.TeamCreate, and is useful for accessing the field via an interface.
func (v *createTeamResponse) GetTeamCreate() createTeamTeamCreateTeamPayload { return v.TeamCreate }

// createTeamTeamCreateTeamPayload includes the requested fields of the GraphQL type TeamPayload.
type createTeamTeamCreateTeamPayload struct {
	// The team that was created or updated.
	Team createTeamTeamCreateTeamPayloadTeam `json:"team"`
}

// GetTeam returns createTeamTeamCreateTeamPayload.Team, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayload) GetTeam() createTeamTeamCreateTeamPayloadTeam {
	return v.Team
}

// createTeamTeamCreateTeamPayloadTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type createTeamTeamCreateTeamPayloadTeam struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The team's name.
	Name string `json:"name"`
	// The team's unique key. The key is used in URLs.
	Key string `json:"key"`
	// Whether the team is private or not.
	Private bool `json:"private"`
	// The team's description.
	Description string `json:"description"`
	// The icon of the team.
	Icon string `json:"icon"`
	// The team's color.
	Color string `json:"color"`
	// The timezone of the team. Defaults to "America/Los_Angeles"
	Timezone string `json:"timezone"`
	// Whether issues without priority should be sorted first.
	IssueOrderingNoPriorityFirst bool `json:"issueOrderingNoPriorityFirst"`
	// Whether to group recent issue history entries.
	GroupIssueHistory bool `json:"groupIssueHistory"`
	// Whether to move issues to bottom of the column when changing state.
	IssueSortOrderDefaultToBottom bool `json:"issueSortOrderDefaultToBottom"`
	// Period after which automatically closed and completed issues are automatically archived in months.
	AutoArchivePeriod float64 `json:"autoArchivePeriod"`
	// Period after which issues are automatically closed in months. Null/undefined means disabled.
	AutoClosePeriod float64 `json:"autoClosePeriod"`
	// Whether triage mode is enabled for the team or not.
	TriageEnabled bool `json:"triageEnabled"`
	// Whether the team uses cycles.
	CyclesEnabled bool `json:"cyclesEnabled"`
	// The day of the week that a new cycle starts.
	CycleStartDay float64 `json:"cycleStartDay"`
	// The duration of a cycle in weeks.
	CycleDuration float64 `json:"cycleDuration"`
	// The cooldown time after each cycle in weeks.
	CycleCooldownTime float64 `json:"cycleCooldownTime"`
	// How many upcoming cycles to create.
	UpcomingCycleCount float64 `json:"upcomingCycleCount"`
	// Auto assign started issues to current cycle.
	CycleIssueAutoAssignStarted bool `json:"cycleIssueAutoAssignStarted"`
	// Auto assign completed issues to current cycle.
	CycleIssueAutoAssignCompleted bool `json:"cycleIssueAutoAssignCompleted"`
	// Only allow issues issues with cycles in Active Issues.
	CycleLockToActive bool `json:"cycleLockToActive"`
	// The issue estimation type to use.
	IssueEstimationType string `json:"issueEstimationType"`
	// Whether to allow zeros in issues estimates.
	IssueEstimationAllowZero bool `json:"issueEstimationAllowZero"`
	// Whether to add additional points to the estimate scale.
	IssueEstimationExtended bool `json:"issueEstimationExtended"`
	// What to use as an default estimate for unestimated issues.
	DefaultIssueEstimate float64 `json:"defaultIssueEstimate"`
}

// GetId returns createTeamTeamCreateTeamPayloadTeam.Id, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetId() string { return v.Id }

// GetName returns createTeamTeamCreateTeamPayloadTeam.Name, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetName() string { return v.Name }

// GetKey returns createTeamTeamCreateTeamPayloadTeam.Key, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetKey() string { return v.Key }

// GetPrivate returns createTeamTeamCreateTeamPayloadTeam.Private, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetPrivate() bool { return v.Private }

// GetDescription returns createTeamTeamCreateTeamPayloadTeam.Description, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetDescription() string { return v.Description }

// GetIcon returns createTeamTeamCreateTeamPayloadTeam.Icon, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetIcon() string { return v.Icon }

// GetColor returns createTeamTeamCreateTeamPayloadTeam.Color, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetColor() string { return v.Color }

// GetTimezone returns createTeamTeamCreateTeamPayloadTeam.Timezone, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetTimezone() string { return v.Timezone }

// GetIssueOrderingNoPriorityFirst returns createTeamTeamCreateTeamPayloadTeam.IssueOrderingNoPriorityFirst, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetIssueOrderingNoPriorityFirst() bool {
	return v.IssueOrderingNoPriorityFirst
}

// GetGroupIssueHistory returns createTeamTeamCreateTeamPayloadTeam.GroupIssueHistory, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetGroupIssueHistory() bool { return v.GroupIssueHistory }

// GetIssueSortOrderDefaultToBottom returns createTeamTeamCreateTeamPayloadTeam.IssueSortOrderDefaultToBottom, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetIssueSortOrderDefaultToBottom() bool {
	return v.IssueSortOrderDefaultToBottom
}

// GetAutoArchivePeriod returns createTeamTeamCreateTeamPayloadTeam.AutoArchivePeriod, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetAutoArchivePeriod() float64 {
	return v.AutoArchivePeriod
}

// GetAutoClosePeriod returns createTeamTeamCreateTeamPayloadTeam.AutoClosePeriod, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetAutoClosePeriod() float64 { return v.AutoClosePeriod }

// GetTriageEnabled returns createTeamTeamCreateTeamPayloadTeam.TriageEnabled, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetTriageEnabled() bool { return v.TriageEnabled }

// GetCyclesEnabled returns createTeamTeamCreateTeamPayloadTeam.CyclesEnabled, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetCyclesEnabled() bool { return v.CyclesEnabled }

// GetCycleStartDay returns createTeamTeamCreateTeamPayloadTeam.CycleStartDay, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetCycleStartDay() float64 { return v.CycleStartDay }

// GetCycleDuration returns createTeamTeamCreateTeamPayloadTeam.CycleDuration, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetCycleDuration() float64 { return v.CycleDuration }

// GetCycleCooldownTime returns createTeamTeamCreateTeamPayloadTeam.CycleCooldownTime, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetCycleCooldownTime() float64 {
	return v.CycleCooldownTime
}

// GetUpcomingCycleCount returns createTeamTeamCreateTeamPayloadTeam.UpcomingCycleCount, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetUpcomingCycleCount() float64 {
	return v.UpcomingCycleCount
}

// GetCycleIssueAutoAssignStarted returns createTeamTeamCreateTeamPayloadTeam.CycleIssueAutoAssignStarted, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetCycleIssueAutoAssignStarted() bool {
	return v.CycleIssueAutoAssignStarted
}

// GetCycleIssueAutoAssignCompleted returns createTeamTeamCreateTeamPayloadTeam.CycleIssueAutoAssignCompleted, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetCycleIssueAutoAssignCompleted() bool {
	return v.CycleIssueAutoAssignCompleted
}

// GetCycleLockToActive returns createTeamTeamCreateTeamPayloadTeam.CycleLockToActive, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetCycleLockToActive() bool { return v.CycleLockToActive }

// GetIssueEstimationType returns createTeamTeamCreateTeamPayloadTeam.IssueEstimationType, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetIssueEstimationType() string {
	return v.IssueEstimationType
}

// GetIssueEstimationAllowZero returns createTeamTeamCreateTeamPayloadTeam.IssueEstimationAllowZero, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetIssueEstimationAllowZero() bool {
	return v.IssueEstimationAllowZero
}

// GetIssueEstimationExtended returns createTeamTeamCreateTeamPayloadTeam.IssueEstimationExtended, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetIssueEstimationExtended() bool {
	return v.IssueEstimationExtended
}

// GetDefaultIssueEstimate returns createTeamTeamCreateTeamPayloadTeam.DefaultIssueEstimate, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetDefaultIssueEstimate() float64 {
	return v.DefaultIssueEstimate
}

// createWorkflowStateResponse is returned by createWorkflowState on success.
type createWorkflowStateResponse struct {
	// Creates a new state, adding it to the workflow of a team.
	WorkflowStateCreate createWorkflowStateWorkflowStateCreateWorkflowStatePayload `json:"workflowStateCreate"`
}

// GetWorkflowStateCreate returns createWorkflowStateResponse.WorkflowStateCreate, and is useful for accessing the field via an interface.
func (v *createWorkflowStateResponse) GetWorkflowStateCreate() createWorkflowStateWorkflowStateCreateWorkflowStatePayload {
	return v.WorkflowStateCreate
}

// createWorkflowStateWorkflowStateCreateWorkflowStatePayload includes the requested fields of the GraphQL type WorkflowStatePayload.
type createWorkflowStateWorkflowStateCreateWorkflowStatePayload struct {
	// The state that was created or updated.
	WorkflowState createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState `json:"workflowState"`
}

// GetWorkflowState returns createWorkflowStateWorkflowStateCreateWorkflowStatePayload.WorkflowState, and is useful for accessing the field via an interface.
func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayload) GetWorkflowState() createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState {
	return v.WorkflowState
}

// createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The state's name.
	Name string `json:"name"`
	// Description of the state.
	Description string `json:"description"`
	// The state's UI color as a HEX string.
	Color string `json:"color"`
	// The type of the state.
	Type string `json:"type"`
	// The position of the state in the team flow.
	Position float64 `json:"position"`
	// The team to which this state belongs to.
	Team createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowStateTeam `json:"team"`
}

// GetId returns createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState) GetId() string {
	return v.Id
}

// GetName returns createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState.Name, and is useful for accessing the field via an interface.
func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState) GetName() string {
	return v.Name
}

// GetDescription returns createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState.Description, and is useful for accessing the field via an interface.
func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState) GetDescription() string {
	return v.Description
}

// GetColor returns createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState.Color, and is useful for accessing the field via an interface.
func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState) GetColor() string {
	return v.Color
}

// GetType returns createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState.Type, and is useful for accessing the field via an interface.
func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState) GetType() string {
	return v.Type
}

// GetPosition returns createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState.Position, and is useful for accessing the field via an interface.
func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState) GetPosition() float64 {
	return v.Position
}

// GetTeam returns createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState.Team, and is useful for accessing the field via an interface.
func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState) GetTeam() createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowStateTeam {
	return v.Team
}

// createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowStateTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowStateTeam struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowStateTeam.Id, and is useful for accessing the field via an interface.
func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowStateTeam) GetId() string {
	return v.Id
}

// createWorkspaceLabelIssueLabelCreateIssueLabelPayload includes the requested fields of the GraphQL type IssueLabelPayload.
type createWorkspaceLabelIssueLabelCreateIssueLabelPayload struct {
	// The label that was created or updated.
	IssueLabel createWorkspaceLabelIssueLabelCreateIssueLabelPayloadIssueLabel `json:"issueLabel"`
}

// GetIssueLabel returns createWorkspaceLabelIssueLabelCreateIssueLabelPayload.IssueLabel, and is useful for accessing the field via an interface.
func (v *createWorkspaceLabelIssueLabelCreateIssueLabelPayload) GetIssueLabel() createWorkspaceLabelIssueLabelCreateIssueLabelPayloadIssueLabel {
	return v.IssueLabel
}

// createWorkspaceLabelIssueLabelCreateIssueLabelPayloadIssueLabel includes the requested fields of the GraphQL type IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type createWorkspaceLabelIssueLabelCreateIssueLabelPayloadIssueLabel struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The label's name.
	Name string `json:"name"`
	// The label's description.
	Description string `json:"description"`
	// The label's color as a HEX string.
	Color string `json:"color"`
}

// GetId returns createWorkspaceLabelIssueLabelCreateIssueLabelPayloadIssueLabel.Id, and is useful for accessing the field via an interface.
func (v *createWorkspaceLabelIssueLabelCreateIssueLabelPayloadIssueLabel) GetId() string { return v.Id }

// GetName returns createWorkspaceLabelIssueLabelCreateIssueLabelPayloadIssueLabel.Name, and is useful for accessing the field via an interface.
func (v *createWorkspaceLabelIssueLabelCreateIssueLabelPayloadIssueLabel) GetName() string {
	return v.Name
}

// GetDescription returns createWorkspaceLabelIssueLabelCreateIssueLabelPayloadIssueLabel.Description, and is useful for accessing the field via an interface.
func (v *createWorkspaceLabelIssueLabelCreateIssueLabelPayloadIssueLabel) GetDescription() string {
	return v.Description
}

// GetColor returns createWorkspaceLabelIssueLabelCreateIssueLabelPayloadIssueLabel.Color, and is useful for accessing the field via an interface.
func (v *createWorkspaceLabelIssueLabelCreateIssueLabelPayloadIssueLabel) GetColor() string {
	return v.Color
}

// createWorkspaceLabelResponse is returned by createWorkspaceLabel on success.
type createWorkspaceLabelResponse struct {
	// Creates a new label.
	IssueLabelCreate createWorkspaceLabelIssueLabelCreateIssueLabelPayload `json:"issueLabelCreate"`
}

// GetIssueLabelCreate returns createWorkspaceLabelResponse.IssueLabelCreate, and is useful for accessing the field via an interface.
func (v *createWorkspaceLabelResponse) GetIssueLabelCreate() createWorkspaceLabelIssueLabelCreateIssueLabelPayload {
	return v.IssueLabelCreate
}

// deleteTeamLabelIssueLabelDeleteArchivePayload includes the requested fields of the GraphQL type ArchivePayload.
type deleteTeamLabelIssueLabelDeleteArchivePayload struct {
	// Whether the operation was successful.
	Success bool `json:"success"`
}

// GetSuccess returns deleteTeamLabelIssueLabelDeleteArchivePayload.Success, and is useful for accessing the field via an interface.
func (v *deleteTeamLabelIssueLabelDeleteArchivePayload) GetSuccess() bool { return v.Success }

// deleteTeamLabelResponse is returned by deleteTeamLabel on success.
type deleteTeamLabelResponse struct {
	// Deletes an issue label.
	IssueLabelDelete deleteTeamLabelIssueLabelDeleteArchivePayload `json:"issueLabelDelete"`
}

// GetIssueLabelDelete returns deleteTeamLabelResponse.IssueLabelDelete, and is useful for accessing the field via an interface.
func (v *deleteTeamLabelResponse) GetIssueLabelDelete() deleteTeamLabelIssueLabelDeleteArchivePayload {
	return v.IssueLabelDelete
}

// deleteTeamResponse is returned by deleteTeam on success.
type deleteTeamResponse struct {
	// Deletes a team.
	TeamDelete deleteTeamTeamDeleteArchivePayload `json:"teamDelete"`
}

// GetTeamDelete returns deleteTeamResponse.TeamDelete, and is useful for accessing the field via an interface.
func (v *deleteTeamResponse) GetTeamDelete() deleteTeamTeamDeleteArchivePayload { return v.TeamDelete }

// deleteTeamTeamDeleteArchivePayload includes the requested fields of the GraphQL type ArchivePayload.
type deleteTeamTeamDeleteArchivePayload struct {
	// Whether the operation was successful.
	Success bool `json:"success"`
}

// GetSuccess returns deleteTeamTeamDeleteArchivePayload.Success, and is useful for accessing the field via an interface.
func (v *deleteTeamTeamDeleteArchivePayload) GetSuccess() bool { return v.Success }

// deleteWorkspaceLabelIssueLabelDeleteArchivePayload includes the requested fields of the GraphQL type ArchivePayload.
type deleteWorkspaceLabelIssueLabelDeleteArchivePayload struct {
	// Whether the operation was successful.
	Success bool `json:"success"`
}

// GetSuccess returns deleteWorkspaceLabelIssueLabelDeleteArchivePayload.Success, and is useful for accessing the field via an interface.
func (v *deleteWorkspaceLabelIssueLabelDeleteArchivePayload) GetSuccess() bool { return v.Success }

// deleteWorkspaceLabelResponse is returned by deleteWorkspaceLabel on success.
type deleteWorkspaceLabelResponse struct {
	// Deletes an issue label.
	IssueLabelDelete deleteWorkspaceLabelIssueLabelDeleteArchivePayload `json:"issueLabelDelete"`
}

// GetIssueLabelDelete returns deleteWorkspaceLabelResponse.IssueLabelDelete, and is useful for accessing the field via an interface.
func (v *deleteWorkspaceLabelResponse) GetIssueLabelDelete() deleteWorkspaceLabelIssueLabelDeleteArchivePayload {
	return v.IssueLabelDelete
}

// findTeamLabelIssueLabelsIssueLabelConnection includes the requested fields of the GraphQL type IssueLabelConnection.
type findTeamLabelIssueLabelsIssueLabelConnection struct {
	Nodes []findTeamLabelIssueLabelsIssueLabelConnectionNodesIssueLabel `json:"nodes"`
}

// GetNodes returns findTeamLabelIssueLabelsIssueLabelConnection.Nodes, and is useful for accessing the field via an interface.
func (v *findTeamLabelIssueLabelsIssueLabelConnection) GetNodes() []findTeamLabelIssueLabelsIssueLabelConnectionNodesIssueLabel {
	return v.Nodes
}

// findTeamLabelIssueLabelsIssueLabelConnectionNodesIssueLabel includes the requested fields of the GraphQL type IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type findTeamLabelIssueLabelsIssueLabelConnectionNodesIssueLabel struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns findTeamLabelIssueLabelsIssueLabelConnectionNodesIssueLabel.Id, and is useful for accessing the field via an interface.
func (v *findTeamLabelIssueLabelsIssueLabelConnectionNodesIssueLabel) GetId() string { return v.Id }

// findTeamLabelResponse is returned by findTeamLabel on success.
type findTeamLabelResponse struct {
	// All issue labels.
	IssueLabels findTeamLabelIssueLabelsIssueLabelConnection `json:"issueLabels"`
}

// GetIssueLabels returns findTeamLabelResponse.IssueLabels, and is useful for accessing the field via an interface.
func (v *findTeamLabelResponse) GetIssueLabels() findTeamLabelIssueLabelsIssueLabelConnection {
	return v.IssueLabels
}

// findWorkflowStateResponse is returned by findWorkflowState on success.
type findWorkflowStateResponse struct {
	// All issue workflow states.
	WorkflowStates findWorkflowStateWorkflowStatesWorkflowStateConnection `json:"workflowStates"`
}

// GetWorkflowStates returns findWorkflowStateResponse.WorkflowStates, and is useful for accessing the field via an interface.
func (v *findWorkflowStateResponse) GetWorkflowStates() findWorkflowStateWorkflowStatesWorkflowStateConnection {
	return v.WorkflowStates
}

// findWorkflowStateWorkflowStatesWorkflowStateConnection includes the requested fields of the GraphQL type WorkflowStateConnection.
type findWorkflowStateWorkflowStatesWorkflowStateConnection struct {
	Nodes []findWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState `json:"nodes"`
}

// GetNodes returns findWorkflowStateWorkflowStatesWorkflowStateConnection.Nodes, and is useful for accessing the field via an interface.
func (v *findWorkflowStateWorkflowStatesWorkflowStateConnection) GetNodes() []findWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState {
	return v.Nodes
}

// findWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type findWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns findWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *findWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetId() string {
	return v.Id
}

// findWorkspaceLabelIssueLabelsIssueLabelConnection includes the requested fields of the GraphQL type IssueLabelConnection.
type findWorkspaceLabelIssueLabelsIssueLabelConnection struct {
	Nodes []findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabel `json:"nodes"`
}

// GetNodes returns findWorkspaceLabelIssueLabelsIssueLabelConnection.Nodes, and is useful for accessing the field via an interface.
func (v *findWorkspaceLabelIssueLabelsIssueLabelConnection) GetNodes() []findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabel {
	return v.Nodes
}

// findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabel includes the requested fields of the GraphQL type IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabel struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabel.Id, and is useful for accessing the field via an interface.
func (v *findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabel) GetId() string {
	return v.Id
}

// findWorkspaceLabelResponse is returned by findWorkspaceLabel on success.
type findWorkspaceLabelResponse struct {
	// All issue labels.
	IssueLabels findWorkspaceLabelIssueLabelsIssueLabelConnection `json:"issueLabels"`
}

// GetIssueLabels returns findWorkspaceLabelResponse.IssueLabels, and is useful for accessing the field via an interface.
func (v *findWorkspaceLabelResponse) GetIssueLabels() findWorkspaceLabelIssueLabelsIssueLabelConnection {
	return v.IssueLabels
}

// getTeamLabelIssueLabel includes the requested fields of the GraphQL type IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type getTeamLabelIssueLabel struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The label's name.
	Name string `json:"name"`
	// The label's description.
	Description string `json:"description"`
	// The label's color as a HEX string.
	Color string `json:"color"`
	// The team that the label is associated with. If null, the label is associated with the global workspace..
	Team getTeamLabelIssueLabelTeam `json:"team"`
}

// GetId returns getTeamLabelIssueLabel.Id, and is useful for accessing the field via an interface.
func (v *getTeamLabelIssueLabel) GetId() string { return v.Id }

// GetName returns getTeamLabelIssueLabel.Name, and is useful for accessing the field via an interface.
func (v *getTeamLabelIssueLabel) GetName() string { return v.Name }

// GetDescription returns getTeamLabelIssueLabel.Description, and is useful for accessing the field via an interface.
func (v *getTeamLabelIssueLabel) GetDescription() string { return v.Description }

// GetColor returns getTeamLabelIssueLabel.Color, and is useful for accessing the field via an interface.
func (v *getTeamLabelIssueLabel) GetColor() string { return v.Color }

// GetTeam returns getTeamLabelIssueLabel.Team, and is useful for accessing the field via an interface.
func (v *getTeamLabelIssueLabel) GetTeam() getTeamLabelIssueLabelTeam { return v.Team }

// getTeamLabelIssueLabelTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type getTeamLabelIssueLabelTeam struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns getTeamLabelIssueLabelTeam.Id, and is useful for accessing the field via an interface.
func (v *getTeamLabelIssueLabelTeam) GetId() string { return v.Id }

// getTeamLabelResponse is returned by getTeamLabel on success.
type getTeamLabelResponse struct {
	// One specific label.
	IssueLabel getTeamLabelIssueLabel `json:"issueLabel"`
}

// GetIssueLabel returns getTeamLabelResponse.IssueLabel, and is useful for accessing the field via an interface.
func (v *getTeamLabelResponse) GetIssueLabel() getTeamLabelIssueLabel { return v.IssueLabel }

// getTeamResponse is returned by getTeam on success.
type getTeamResponse struct {
	// One specific team.
	Team getTeamTeam `json:"team"`
}

// GetTeam returns getTeamResponse.Team, and is useful for accessing the field via an interface.
func (v *getTeamResponse) GetTeam() getTeamTeam { return v.Team }

// getTeamTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type getTeamTeam struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The team's name.
	Name string `json:"name"`
	// The team's unique key. The key is used in URLs.
	Key string `json:"key"`
	// Whether the team is private or not.
	Private bool `json:"private"`
	// The team's description.
	Description string `json:"description"`
	// The icon of the team.
	Icon string `json:"icon"`
	// The team's color.
	Color string `json:"color"`
	// The timezone of the team. Defaults to "America/Los_Angeles"
	Timezone string `json:"timezone"`
	// Whether issues without priority should be sorted first.
	IssueOrderingNoPriorityFirst bool `json:"issueOrderingNoPriorityFirst"`
	// Whether to group recent issue history entries.
	GroupIssueHistory bool `json:"groupIssueHistory"`
	// Whether to move issues to bottom of the column when changing state.
	IssueSortOrderDefaultToBottom bool `json:"issueSortOrderDefaultToBottom"`
	// Period after which automatically closed and completed issues are automatically archived in months.
	AutoArchivePeriod float64 `json:"autoArchivePeriod"`
	// Period after which issues are automatically closed in months. Null/undefined means disabled.
	AutoClosePeriod float64 `json:"autoClosePeriod"`
	// Whether triage mode is enabled for the team or not.
	TriageEnabled bool `json:"triageEnabled"`
	// Whether the team uses cycles.
	CyclesEnabled bool `json:"cyclesEnabled"`
	// The day of the week that a new cycle starts.
	CycleStartDay float64 `json:"cycleStartDay"`
	// The duration of a cycle in weeks.
	CycleDuration float64 `json:"cycleDuration"`
	// The cooldown time after each cycle in weeks.
	CycleCooldownTime float64 `json:"cycleCooldownTime"`
	// How many upcoming cycles to create.
	UpcomingCycleCount float64 `json:"upcomingCycleCount"`
	// Auto assign started issues to current cycle.
	CycleIssueAutoAssignStarted bool `json:"cycleIssueAutoAssignStarted"`
	// Auto assign completed issues to current cycle.
	CycleIssueAutoAssignCompleted bool `json:"cycleIssueAutoAssignCompleted"`
	// Only allow issues issues with cycles in Active Issues.
	CycleLockToActive bool `json:"cycleLockToActive"`
	// The issue estimation type to use.
	IssueEstimationType string `json:"issueEstimationType"`
	// Whether to allow zeros in issues estimates.
	IssueEstimationAllowZero bool `json:"issueEstimationAllowZero"`
	// Whether to add additional points to the estimate scale.
	IssueEstimationExtended bool `json:"issueEstimationExtended"`
	// What to use as an default estimate for unestimated issues.
	DefaultIssueEstimate float64 `json:"defaultIssueEstimate"`
}

// GetId returns getTeamTeam.Id, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetId() string { return v.Id }

// GetName returns getTeamTeam.Name, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetName() string { return v.Name }

// GetKey returns getTeamTeam.Key, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetKey() string { return v.Key }

// GetPrivate returns getTeamTeam.Private, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetPrivate() bool { return v.Private }

// GetDescription returns getTeamTeam.Description, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetDescription() string { return v.Description }

// GetIcon returns getTeamTeam.Icon, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetIcon() string { return v.Icon }

// GetColor returns getTeamTeam.Color, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetColor() string { return v.Color }

// GetTimezone returns getTeamTeam.Timezone, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetTimezone() string { return v.Timezone }

// GetIssueOrderingNoPriorityFirst returns getTeamTeam.IssueOrderingNoPriorityFirst, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetIssueOrderingNoPriorityFirst() bool { return v.IssueOrderingNoPriorityFirst }

// GetGroupIssueHistory returns getTeamTeam.GroupIssueHistory, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetGroupIssueHistory() bool { return v.GroupIssueHistory }

// GetIssueSortOrderDefaultToBottom returns getTeamTeam.IssueSortOrderDefaultToBottom, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetIssueSortOrderDefaultToBottom() bool { return v.IssueSortOrderDefaultToBottom }

// GetAutoArchivePeriod returns getTeamTeam.AutoArchivePeriod, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetAutoArchivePeriod() float64 { return v.AutoArchivePeriod }

// GetAutoClosePeriod returns getTeamTeam.AutoClosePeriod, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetAutoClosePeriod() float64 { return v.AutoClosePeriod }

// GetTriageEnabled returns getTeamTeam.TriageEnabled, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetTriageEnabled() bool { return v.TriageEnabled }

// GetCyclesEnabled returns getTeamTeam.CyclesEnabled, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetCyclesEnabled() bool { return v.CyclesEnabled }

// GetCycleStartDay returns getTeamTeam.CycleStartDay, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetCycleStartDay() float64 { return v.CycleStartDay }

// GetCycleDuration returns getTeamTeam.CycleDuration, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetCycleDuration() float64 { return v.CycleDuration }

// GetCycleCooldownTime returns getTeamTeam.CycleCooldownTime, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetCycleCooldownTime() float64 { return v.CycleCooldownTime }

// GetUpcomingCycleCount returns getTeamTeam.UpcomingCycleCount, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetUpcomingCycleCount() float64 { return v.UpcomingCycleCount }

// GetCycleIssueAutoAssignStarted returns getTeamTeam.CycleIssueAutoAssignStarted, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetCycleIssueAutoAssignStarted() bool { return v.CycleIssueAutoAssignStarted }

// GetCycleIssueAutoAssignCompleted returns getTeamTeam.CycleIssueAutoAssignCompleted, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetCycleIssueAutoAssignCompleted() bool { return v.CycleIssueAutoAssignCompleted }

// GetCycleLockToActive returns getTeamTeam.CycleLockToActive, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetCycleLockToActive() bool { return v.CycleLockToActive }

// GetIssueEstimationType returns getTeamTeam.IssueEstimationType, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetIssueEstimationType() string { return v.IssueEstimationType }

// GetIssueEstimationAllowZero returns getTeamTeam.IssueEstimationAllowZero, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetIssueEstimationAllowZero() bool { return v.IssueEstimationAllowZero }

// GetIssueEstimationExtended returns getTeamTeam.IssueEstimationExtended, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetIssueEstimationExtended() bool { return v.IssueEstimationExtended }

// GetDefaultIssueEstimate returns getTeamTeam.DefaultIssueEstimate, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetDefaultIssueEstimate() float64 { return v.DefaultIssueEstimate }

// getWorkflowStateResponse is returned by getWorkflowState on success.
type getWorkflowStateResponse struct {
	// One specific state.
	WorkflowState getWorkflowStateWorkflowState `json:"workflowState"`
}

// GetWorkflowState returns getWorkflowStateResponse.WorkflowState, and is useful for accessing the field via an interface.
func (v *getWorkflowStateResponse) GetWorkflowState() getWorkflowStateWorkflowState {
	return v.WorkflowState
}

// getWorkflowStateWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type getWorkflowStateWorkflowState struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The state's name.
	Name string `json:"name"`
	// Description of the state.
	Description string `json:"description"`
	// The state's UI color as a HEX string.
	Color string `json:"color"`
	// The type of the state.
	Type string `json:"type"`
	// The position of the state in the team flow.
	Position float64 `json:"position"`
	// The team to which this state belongs to.
	Team getWorkflowStateWorkflowStateTeam `json:"team"`
}

// GetId returns getWorkflowStateWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *getWorkflowStateWorkflowState) GetId() string { return v.Id }

// GetName returns getWorkflowStateWorkflowState.Name, and is useful for accessing the field via an interface.
func (v *getWorkflowStateWorkflowState) GetName() string { return v.Name }

// GetDescription returns getWorkflowStateWorkflowState.Description, and is useful for accessing the field via an interface.
func (v *getWorkflowStateWorkflowState) GetDescription() string { return v.Description }

// GetColor returns getWorkflowStateWorkflowState.Color, and is useful for accessing the field via an interface.
func (v *getWorkflowStateWorkflowState) GetColor() string { return v.Color }

// GetType returns getWorkflowStateWorkflowState.Type, and is useful for accessing the field via an interface.
func (v *getWorkflowStateWorkflowState) GetType() string { return v.Type }

// GetPosition returns getWorkflowStateWorkflowState.Position, and is useful for accessing the field via an interface.
func (v *getWorkflowStateWorkflowState) GetPosition() float64 { return v.Position }

// GetTeam returns getWorkflowStateWorkflowState.Team, and is useful for accessing the field via an interface.
func (v *getWorkflowStateWorkflowState) GetTeam() getWorkflowStateWorkflowStateTeam { return v.Team }

// getWorkflowStateWorkflowStateTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type getWorkflowStateWorkflowStateTeam struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns getWorkflowStateWorkflowStateTeam.Id, and is useful for accessing the field via an interface.
func (v *getWorkflowStateWorkflowStateTeam) GetId() string { return v.Id }

// getWorkspaceLabelIssueLabel includes the requested fields of the GraphQL type IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type getWorkspaceLabelIssueLabel struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The label's name.
	Name string `json:"name"`
	// The label's description.
	Description string `json:"description"`
	// The label's color as a HEX string.
	Color string `json:"color"`
}

// GetId returns getWorkspaceLabelIssueLabel.Id, and is useful for accessing the field via an interface.
func (v *getWorkspaceLabelIssueLabel) GetId() string { return v.Id }

// GetName returns getWorkspaceLabelIssueLabel.Name, and is useful for accessing the field via an interface.
func (v *getWorkspaceLabelIssueLabel) GetName() string { return v.Name }

// GetDescription returns getWorkspaceLabelIssueLabel.Description, and is useful for accessing the field via an interface.
func (v *getWorkspaceLabelIssueLabel) GetDescription() string { return v.Description }

// GetColor returns getWorkspaceLabelIssueLabel.Color, and is useful for accessing the field via an interface.
func (v *getWorkspaceLabelIssueLabel) GetColor() string { return v.Color }

// getWorkspaceLabelResponse is returned by getWorkspaceLabel on success.
type getWorkspaceLabelResponse struct {
	// One specific label.
	IssueLabel getWorkspaceLabelIssueLabel `json:"issueLabel"`
}

// GetIssueLabel returns getWorkspaceLabelResponse.IssueLabel, and is useful for accessing the field via an interface.
func (v *getWorkspaceLabelResponse) GetIssueLabel() getWorkspaceLabelIssueLabel { return v.IssueLabel }

// getWorkspaceOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An organization. Organizations are root-level objects that contain user accounts and teams.
type getWorkspaceOrganization struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The organization's unique URL key.
	UrlKey string `json:"urlKey"`
	// The organization's name.
	Name string `json:"name"`
}

// GetId returns getWorkspaceOrganization.Id, and is useful for accessing the field via an interface.
func (v *getWorkspaceOrganization) GetId() string { return v.Id }

// GetUrlKey returns getWorkspaceOrganization.UrlKey, and is useful for accessing the field via an interface.
func (v *getWorkspaceOrganization) GetUrlKey() string { return v.UrlKey }

// GetName returns getWorkspaceOrganization.Name, and is useful for accessing the field via an interface.
func (v *getWorkspaceOrganization) GetName() string { return v.Name }

// getWorkspaceResponse is returned by getWorkspace on success.
type getWorkspaceResponse struct {
	// The user's organization.
	Organization getWorkspaceOrganization `json:"organization"`
}

// GetOrganization returns getWorkspaceResponse.Organization, and is useful for accessing the field via an interface.
func (v *getWorkspaceResponse) GetOrganization() getWorkspaceOrganization { return v.Organization }

// updateTeamLabelIssueLabelUpdateIssueLabelPayload includes the requested fields of the GraphQL type IssueLabelPayload.
type updateTeamLabelIssueLabelUpdateIssueLabelPayload struct {
	// The label that was created or updated.
	IssueLabel updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabel `json:"issueLabel"`
}

// GetIssueLabel returns updateTeamLabelIssueLabelUpdateIssueLabelPayload.IssueLabel, and is useful for accessing the field via an interface.
func (v *updateTeamLabelIssueLabelUpdateIssueLabelPayload) GetIssueLabel() updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabel {
	return v.IssueLabel
}

// updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabel includes the requested fields of the GraphQL type IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabel struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The label's name.
	Name string `json:"name"`
	// The label's description.
	Description string `json:"description"`
	// The label's color as a HEX string.
	Color string `json:"color"`
	// The team that the label is associated with. If null, the label is associated with the global workspace..
	Team updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabelTeam `json:"team"`
}

// GetId returns updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabel.Id, and is useful for accessing the field via an interface.
func (v *updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabel) GetId() string { return v.Id }

// GetName returns updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabel.Name, and is useful for accessing the field via an interface.
func (v *updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabel) GetName() string { return v.Name }

// GetDescription returns updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabel.Description, and is useful for accessing the field via an interface.
func (v *updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabel) GetDescription() string {
	return v.Description
}

// GetColor returns updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabel.Color, and is useful for accessing the field via an interface.
func (v *updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabel) GetColor() string {
	return v.Color
}

// GetTeam returns updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabel.Team, and is useful for accessing the field via an interface.
func (v *updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabel) GetTeam() updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabelTeam {
	return v.Team
}

// updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabelTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabelTeam struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabelTeam.Id, and is useful for accessing the field via an interface.
func (v *updateTeamLabelIssueLabelUpdateIssueLabelPayloadIssueLabelTeam) GetId() string { return v.Id }

// updateTeamLabelResponse is returned by updateTeamLabel on success.
type updateTeamLabelResponse struct {
	// Updates an label.
	IssueLabelUpdate updateTeamLabelIssueLabelUpdateIssueLabelPayload `json:"issueLabelUpdate"`
}

// GetIssueLabelUpdate returns updateTeamLabelResponse.IssueLabelUpdate, and is useful for accessing the field via an interface.
func (v *updateTeamLabelResponse) GetIssueLabelUpdate() updateTeamLabelIssueLabelUpdateIssueLabelPayload {
	return v.IssueLabelUpdate
}

// updateTeamResponse is returned by updateTeam on success.
type updateTeamResponse struct {
	// Updates a team.
	TeamUpdate updateTeamTeamUpdateTeamPayload `json:"teamUpdate"`
}

// GetTeamUpdate returns updateTeamResponse.TeamUpdate, and is useful for accessing the field via an interface.
func (v *updateTeamResponse) GetTeamUpdate() updateTeamTeamUpdateTeamPayload { return v.TeamUpdate }

// updateTeamTeamUpdateTeamPayload includes the requested fields of the GraphQL type TeamPayload.
type updateTeamTeamUpdateTeamPayload struct {
	// The team that was created or updated.
	Team updateTeamTeamUpdateTeamPayloadTeam `json:"team"`
}

// GetTeam returns updateTeamTeamUpdateTeamPayload.Team, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayload) GetTeam() updateTeamTeamUpdateTeamPayloadTeam {
	return v.Team
}

// updateTeamTeamUpdateTeamPayloadTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type updateTeamTeamUpdateTeamPayloadTeam struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The team's name.
	Name string `json:"name"`
	// The team's unique key. The key is used in URLs.
	Key string `json:"key"`
	// Whether the team is private or not.
	Private bool `json:"private"`
	// The team's description.
	Description string `json:"description"`
	// The icon of the team.
	Icon string `json:"icon"`
	// The team's color.
	Color string `json:"color"`
	// The timezone of the team. Defaults to "America/Los_Angeles"
	Timezone string `json:"timezone"`
	// Whether issues without priority should be sorted first.
	IssueOrderingNoPriorityFirst bool `json:"issueOrderingNoPriorityFirst"`
	// Whether to group recent issue history entries.
	GroupIssueHistory bool `json:"groupIssueHistory"`
	// Whether to move issues to bottom of the column when changing state.
	IssueSortOrderDefaultToBottom bool `json:"issueSortOrderDefaultToBottom"`
	// Period after which automatically closed and completed issues are automatically archived in months.
	AutoArchivePeriod float64 `json:"autoArchivePeriod"`
	// Period after which issues are automatically closed in months. Null/undefined means disabled.
	AutoClosePeriod float64 `json:"autoClosePeriod"`
	// Whether triage mode is enabled for the team or not.
	TriageEnabled bool `json:"triageEnabled"`
	// Whether the team uses cycles.
	CyclesEnabled bool `json:"cyclesEnabled"`
	// The day of the week that a new cycle starts.
	CycleStartDay float64 `json:"cycleStartDay"`
	// The duration of a cycle in weeks.
	CycleDuration float64 `json:"cycleDuration"`
	// The cooldown time after each cycle in weeks.
	CycleCooldownTime float64 `json:"cycleCooldownTime"`
	// How many upcoming cycles to create.
	UpcomingCycleCount float64 `json:"upcomingCycleCount"`
	// Auto assign started issues to current cycle.
	CycleIssueAutoAssignStarted bool `json:"cycleIssueAutoAssignStarted"`
	// Auto assign completed issues to current cycle.
	CycleIssueAutoAssignCompleted bool `json:"cycleIssueAutoAssignCompleted"`
	// Only allow issues issues with cycles in Active Issues.
	CycleLockToActive bool `json:"cycleLockToActive"`
	// The issue estimation type to use.
	IssueEstimationType string `json:"issueEstimationType"`
	// Whether to allow zeros in issues estimates.
	IssueEstimationAllowZero bool `json:"issueEstimationAllowZero"`
	// Whether to add additional points to the estimate scale.
	IssueEstimationExtended bool `json:"issueEstimationExtended"`
	// What to use as an default estimate for unestimated issues.
	DefaultIssueEstimate float64 `json:"defaultIssueEstimate"`
}

// GetId returns updateTeamTeamUpdateTeamPayloadTeam.Id, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetId() string { return v.Id }

// GetName returns updateTeamTeamUpdateTeamPayloadTeam.Name, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetName() string { return v.Name }

// GetKey returns updateTeamTeamUpdateTeamPayloadTeam.Key, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetKey() string { return v.Key }

// GetPrivate returns updateTeamTeamUpdateTeamPayloadTeam.Private, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetPrivate() bool { return v.Private }

// GetDescription returns updateTeamTeamUpdateTeamPayloadTeam.Description, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetDescription() string { return v.Description }

// GetIcon returns updateTeamTeamUpdateTeamPayloadTeam.Icon, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetIcon() string { return v.Icon }

// GetColor returns updateTeamTeamUpdateTeamPayloadTeam.Color, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetColor() string { return v.Color }

// GetTimezone returns updateTeamTeamUpdateTeamPayloadTeam.Timezone, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetTimezone() string { return v.Timezone }

// GetIssueOrderingNoPriorityFirst returns updateTeamTeamUpdateTeamPayloadTeam.IssueOrderingNoPriorityFirst, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetIssueOrderingNoPriorityFirst() bool {
	return v.IssueOrderingNoPriorityFirst
}

// GetGroupIssueHistory returns updateTeamTeamUpdateTeamPayloadTeam.GroupIssueHistory, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetGroupIssueHistory() bool { return v.GroupIssueHistory }

// GetIssueSortOrderDefaultToBottom returns updateTeamTeamUpdateTeamPayloadTeam.IssueSortOrderDefaultToBottom, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetIssueSortOrderDefaultToBottom() bool {
	return v.IssueSortOrderDefaultToBottom
}

// GetAutoArchivePeriod returns updateTeamTeamUpdateTeamPayloadTeam.AutoArchivePeriod, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetAutoArchivePeriod() float64 {
	return v.AutoArchivePeriod
}

// GetAutoClosePeriod returns updateTeamTeamUpdateTeamPayloadTeam.AutoClosePeriod, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetAutoClosePeriod() float64 { return v.AutoClosePeriod }

// GetTriageEnabled returns updateTeamTeamUpdateTeamPayloadTeam.TriageEnabled, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetTriageEnabled() bool { return v.TriageEnabled }

// GetCyclesEnabled returns updateTeamTeamUpdateTeamPayloadTeam.CyclesEnabled, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetCyclesEnabled() bool { return v.CyclesEnabled }

// GetCycleStartDay returns updateTeamTeamUpdateTeamPayloadTeam.CycleStartDay, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetCycleStartDay() float64 { return v.CycleStartDay }

// GetCycleDuration returns updateTeamTeamUpdateTeamPayloadTeam.CycleDuration, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetCycleDuration() float64 { return v.CycleDuration }

// GetCycleCooldownTime returns updateTeamTeamUpdateTeamPayloadTeam.CycleCooldownTime, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetCycleCooldownTime() float64 {
	return v.CycleCooldownTime
}

// GetUpcomingCycleCount returns updateTeamTeamUpdateTeamPayloadTeam.UpcomingCycleCount, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetUpcomingCycleCount() float64 {
	return v.UpcomingCycleCount
}

// GetCycleIssueAutoAssignStarted returns updateTeamTeamUpdateTeamPayloadTeam.CycleIssueAutoAssignStarted, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetCycleIssueAutoAssignStarted() bool {
	return v.CycleIssueAutoAssignStarted
}

// GetCycleIssueAutoAssignCompleted returns updateTeamTeamUpdateTeamPayloadTeam.CycleIssueAutoAssignCompleted, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetCycleIssueAutoAssignCompleted() bool {
	return v.CycleIssueAutoAssignCompleted
}

// GetCycleLockToActive returns updateTeamTeamUpdateTeamPayloadTeam.CycleLockToActive, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetCycleLockToActive() bool { return v.CycleLockToActive }

// GetIssueEstimationType returns updateTeamTeamUpdateTeamPayloadTeam.IssueEstimationType, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetIssueEstimationType() string {
	return v.IssueEstimationType
}

// GetIssueEstimationAllowZero returns updateTeamTeamUpdateTeamPayloadTeam.IssueEstimationAllowZero, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetIssueEstimationAllowZero() bool {
	return v.IssueEstimationAllowZero
}

// GetIssueEstimationExtended returns updateTeamTeamUpdateTeamPayloadTeam.IssueEstimationExtended, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetIssueEstimationExtended() bool {
	return v.IssueEstimationExtended
}

// GetDefaultIssueEstimate returns updateTeamTeamUpdateTeamPayloadTeam.DefaultIssueEstimate, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetDefaultIssueEstimate() float64 {
	return v.DefaultIssueEstimate
}

// updateWorkflowStateResponse is returned by updateWorkflowState on success.
type updateWorkflowStateResponse struct {
	// Updates a state.
	WorkflowStateUpdate updateWorkflowStateWorkflowStateUpdateWorkflowStatePayload `json:"workflowStateUpdate"`
}

// GetWorkflowStateUpdate returns updateWorkflowStateResponse.WorkflowStateUpdate, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateResponse) GetWorkflowStateUpdate() updateWorkflowStateWorkflowStateUpdateWorkflowStatePayload {
	return v.WorkflowStateUpdate
}

// updateWorkflowStateWorkflowStateUpdateWorkflowStatePayload includes the requested fields of the GraphQL type WorkflowStatePayload.
type updateWorkflowStateWorkflowStateUpdateWorkflowStatePayload struct {
	// The state that was created or updated.
	WorkflowState updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState `json:"workflowState"`
}

// GetWorkflowState returns updateWorkflowStateWorkflowStateUpdateWorkflowStatePayload.WorkflowState, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayload) GetWorkflowState() updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState {
	return v.WorkflowState
}

// updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The state's name.
	Name string `json:"name"`
	// Description of the state.
	Description string `json:"description"`
	// The state's UI color as a HEX string.
	Color string `json:"color"`
	// The type of the state.
	Type string `json:"type"`
	// The position of the state in the team flow.
	Position float64 `json:"position"`
	// The team to which this state belongs to.
	Team updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowStateTeam `json:"team"`
}

// GetId returns updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState) GetId() string {
	return v.Id
}

// GetName returns updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState.Name, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState) GetName() string {
	return v.Name
}

// GetDescription returns updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState.Description, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState) GetDescription() string {
	return v.Description
}

// GetColor returns updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState.Color, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState) GetColor() string {
	return v.Color
}

// GetType returns updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState.Type, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState) GetType() string {
	return v.Type
}

// GetPosition returns updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState.Position, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState) GetPosition() float64 {
	return v.Position
}

// GetTeam returns updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState.Team, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState) GetTeam() updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowStateTeam {
	return v.Team
}

// updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowStateTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowStateTeam struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowStateTeam.Id, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowStateTeam) GetId() string {
	return v.Id
}

// updateWorkspaceLabelIssueLabelUpdateIssueLabelPayload includes the requested fields of the GraphQL type IssueLabelPayload.
type updateWorkspaceLabelIssueLabelUpdateIssueLabelPayload struct {
	// The label that was created or updated.
	IssueLabel updateWorkspaceLabelIssueLabelUpdateIssueLabelPayloadIssueLabel `json:"issueLabel"`
}

// GetIssueLabel returns updateWorkspaceLabelIssueLabelUpdateIssueLabelPayload.IssueLabel, and is useful for accessing the field via an interface.
func (v *updateWorkspaceLabelIssueLabelUpdateIssueLabelPayload) GetIssueLabel() updateWorkspaceLabelIssueLabelUpdateIssueLabelPayloadIssueLabel {
	return v.IssueLabel
}

// updateWorkspaceLabelIssueLabelUpdateIssueLabelPayloadIssueLabel includes the requested fields of the GraphQL type IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type updateWorkspaceLabelIssueLabelUpdateIssueLabelPayloadIssueLabel struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The label's name.
	Name string `json:"name"`
	// The label's description.
	Description string `json:"description"`
	// The label's color as a HEX string.
	Color string `json:"color"`
}

// GetId returns updateWorkspaceLabelIssueLabelUpdateIssueLabelPayloadIssueLabel.Id, and is useful for accessing the field via an interface.
func (v *updateWorkspaceLabelIssueLabelUpdateIssueLabelPayloadIssueLabel) GetId() string { return v.Id }

// GetName returns updateWorkspaceLabelIssueLabelUpdateIssueLabelPayloadIssueLabel.Name, and is useful for accessing the field via an interface.
func (v *updateWorkspaceLabelIssueLabelUpdateIssueLabelPayloadIssueLabel) GetName() string {
	return v.Name
}

// GetDescription returns updateWorkspaceLabelIssueLabelUpdateIssueLabelPayloadIssueLabel.Description, and is useful for accessing the field via an interface.
func (v *updateWorkspaceLabelIssueLabelUpdateIssueLabelPayloadIssueLabel) GetDescription() string {
	return v.Description
}

// GetColor returns updateWorkspaceLabelIssueLabelUpdateIssueLabelPayloadIssueLabel.Color, and is useful for accessing the field via an interface.
func (v *updateWorkspaceLabelIssueLabelUpdateIssueLabelPayloadIssueLabel) GetColor() string {
	return v.Color
}

// updateWorkspaceLabelResponse is returned by updateWorkspaceLabel on success.
type updateWorkspaceLabelResponse struct {
	// Updates an label.
	IssueLabelUpdate updateWorkspaceLabelIssueLabelUpdateIssueLabelPayload `json:"issueLabelUpdate"`
}

// GetIssueLabelUpdate returns updateWorkspaceLabelResponse.IssueLabelUpdate, and is useful for accessing the field via an interface.
func (v *updateWorkspaceLabelResponse) GetIssueLabelUpdate() updateWorkspaceLabelIssueLabelUpdateIssueLabelPayload {
	return v.IssueLabelUpdate
}

func createTeam(
	ctx context.Context,
	client graphql.Client,
	input TeamCreateInput,
) (*createTeamResponse, error) {
	req := &graphql.Request{
		OpName: "createTeam",
		Query: `
mutation createTeam ($input: TeamCreateInput!) {
	teamCreate(input: $input) {
		team {
			id
			name
			key
			private
			description
			icon
			color
			timezone
			issueOrderingNoPriorityFirst
			groupIssueHistory
			issueSortOrderDefaultToBottom
			autoArchivePeriod
			autoClosePeriod
			triageEnabled
			cyclesEnabled
			cycleStartDay
			cycleDuration
			cycleCooldownTime
			upcomingCycleCount
			cycleIssueAutoAssignStarted
			cycleIssueAutoAssignCompleted
			cycleLockToActive
			issueEstimationType
			issueEstimationAllowZero
			issueEstimationExtended
			defaultIssueEstimate
		}
	}
}
`,
		Variables: &__createTeamInput{
			Input: input,
		},
	}
	var err error

	var data createTeamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createTeamLabel(
	ctx context.Context,
	client graphql.Client,
	input IssueLabelCreateInput,
) (*createTeamLabelResponse, error) {
	req := &graphql.Request{
		OpName: "createTeamLabel",
		Query: `
mutation createTeamLabel ($input: IssueLabelCreateInput!) {
	issueLabelCreate(input: $input) {
		issueLabel {
			id
			name
			description
			color
			team {
				id
			}
		}
	}
}
`,
		Variables: &__createTeamLabelInput{
			Input: input,
		},
	}
	var err error

	var data createTeamLabelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createWorkflowState(
	ctx context.Context,
	client graphql.Client,
	input WorkflowStateCreateInput,
) (*createWorkflowStateResponse, error) {
	req := &graphql.Request{
		OpName: "createWorkflowState",
		Query: `
mutation createWorkflowState ($input: WorkflowStateCreateInput!) {
	workflowStateCreate(input: $input) {
		workflowState {
			id
			name
			description
			color
			type
			position
			team {
				id
			}
		}
	}
}
`,
		Variables: &__createWorkflowStateInput{
			Input: input,
		},
	}
	var err error

	var data createWorkflowStateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createWorkspaceLabel(
	ctx context.Context,
	client graphql.Client,
	input IssueLabelCreateInput,
) (*createWorkspaceLabelResponse, error) {
	req := &graphql.Request{
		OpName: "createWorkspaceLabel",
		Query: `
mutation createWorkspaceLabel ($input: IssueLabelCreateInput!) {
	issueLabelCreate(input: $input) {
		issueLabel {
			id
			name
			description
			color
		}
	}
}
`,
		Variables: &__createWorkspaceLabelInput{
			Input: input,
		},
	}
	var err error

	var data createWorkspaceLabelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteTeam(
	ctx context.Context,
	client graphql.Client,
	key string,
) (*deleteTeamResponse, error) {
	req := &graphql.Request{
		OpName: "deleteTeam",
		Query: `
mutation deleteTeam ($key: String!) {
	teamDelete(id: $key) {
		success
	}
}
`,
		Variables: &__deleteTeamInput{
			Key: key,
		},
	}
	var err error

	var data deleteTeamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteTeamLabel(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteTeamLabelResponse, error) {
	req := &graphql.Request{
		OpName: "deleteTeamLabel",
		Query: `
mutation deleteTeamLabel ($id: String!) {
	issueLabelDelete(id: $id) {
		success
	}
}
`,
		Variables: &__deleteTeamLabelInput{
			Id: id,
		},
	}
	var err error

	var data deleteTeamLabelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteWorkspaceLabel(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteWorkspaceLabelResponse, error) {
	req := &graphql.Request{
		OpName: "deleteWorkspaceLabel",
		Query: `
mutation deleteWorkspaceLabel ($id: String!) {
	issueLabelDelete(id: $id) {
		success
	}
}
`,
		Variables: &__deleteWorkspaceLabelInput{
			Id: id,
		},
	}
	var err error

	var data deleteWorkspaceLabelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func findTeamLabel(
	ctx context.Context,
	client graphql.Client,
	name string,
	key string,
) (*findTeamLabelResponse, error) {
	req := &graphql.Request{
		OpName: "findTeamLabel",
		Query: `
query findTeamLabel ($name: String!, $key: String!) {
	issueLabels(filter: {name:{eq:$name},team:{key:{eq:$key}}}) {
		nodes {
			id
		}
	}
}
`,
		Variables: &__findTeamLabelInput{
			Name: name,
			Key:  key,
		},
	}
	var err error

	var data findTeamLabelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func findWorkflowState(
	ctx context.Context,
	client graphql.Client,
	name string,
	key string,
) (*findWorkflowStateResponse, error) {
	req := &graphql.Request{
		OpName: "findWorkflowState",
		Query: `
query findWorkflowState ($name: String!, $key: String!) {
	workflowStates(filter: {name:{eq:$name},team:{key:{eq:$key}}}) {
		nodes {
			id
		}
	}
}
`,
		Variables: &__findWorkflowStateInput{
			Name: name,
			Key:  key,
		},
	}
	var err error

	var data findWorkflowStateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func findWorkspaceLabel(
	ctx context.Context,
	client graphql.Client,
	name string,
) (*findWorkspaceLabelResponse, error) {
	req := &graphql.Request{
		OpName: "findWorkspaceLabel",
		Query: `
query findWorkspaceLabel ($name: String!) {
	issueLabels(filter: {name:{eq:$name}}) {
		nodes {
			id
		}
	}
}
`,
		Variables: &__findWorkspaceLabelInput{
			Name: name,
		},
	}
	var err error

	var data findWorkspaceLabelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getTeam(
	ctx context.Context,
	client graphql.Client,
	key string,
) (*getTeamResponse, error) {
	req := &graphql.Request{
		OpName: "getTeam",
		Query: `
query getTeam ($key: String!) {
	team(id: $key) {
		id
		name
		key
		private
		description
		icon
		color
		timezone
		issueOrderingNoPriorityFirst
		groupIssueHistory
		issueSortOrderDefaultToBottom
		autoArchivePeriod
		autoClosePeriod
		triageEnabled
		cyclesEnabled
		cycleStartDay
		cycleDuration
		cycleCooldownTime
		upcomingCycleCount
		cycleIssueAutoAssignStarted
		cycleIssueAutoAssignCompleted
		cycleLockToActive
		issueEstimationType
		issueEstimationAllowZero
		issueEstimationExtended
		defaultIssueEstimate
	}
}
`,
		Variables: &__getTeamInput{
			Key: key,
		},
	}
	var err error

	var data getTeamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getTeamLabel(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getTeamLabelResponse, error) {
	req := &graphql.Request{
		OpName: "getTeamLabel",
		Query: `
query getTeamLabel ($id: String!) {
	issueLabel(id: $id) {
		id
		name
		description
		color
		team {
			id
		}
	}
}
`,
		Variables: &__getTeamLabelInput{
			Id: id,
		},
	}
	var err error

	var data getTeamLabelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getWorkflowState(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getWorkflowStateResponse, error) {
	req := &graphql.Request{
		OpName: "getWorkflowState",
		Query: `
query getWorkflowState ($id: String!) {
	workflowState(id: $id) {
		id
		name
		description
		color
		type
		position
		team {
			id
		}
	}
}
`,
		Variables: &__getWorkflowStateInput{
			Id: id,
		},
	}
	var err error

	var data getWorkflowStateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getWorkspace(
	ctx context.Context,
	client graphql.Client,
) (*getWorkspaceResponse, error) {
	req := &graphql.Request{
		OpName: "getWorkspace",
		Query: `
query getWorkspace {
	organization {
		id
		urlKey
		name
	}
}
`,
	}
	var err error

	var data getWorkspaceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getWorkspaceLabel(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getWorkspaceLabelResponse, error) {
	req := &graphql.Request{
		OpName: "getWorkspaceLabel",
		Query: `
query getWorkspaceLabel ($id: String!) {
	issueLabel(id: $id) {
		id
		name
		description
		color
	}
}
`,
		Variables: &__getWorkspaceLabelInput{
			Id: id,
		},
	}
	var err error

	var data getWorkspaceLabelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateTeam(
	ctx context.Context,
	client graphql.Client,
	input TeamUpdateInput,
	id string,
) (*updateTeamResponse, error) {
	req := &graphql.Request{
		OpName: "updateTeam",
		Query: `
mutation updateTeam ($input: TeamUpdateInput!, $id: String!) {
	teamUpdate(input: $input, id: $id) {
		team {
			id
			name
			key
			private
			description
			icon
			color
			timezone
			issueOrderingNoPriorityFirst
			groupIssueHistory
			issueSortOrderDefaultToBottom
			autoArchivePeriod
			autoClosePeriod
			triageEnabled
			cyclesEnabled
			cycleStartDay
			cycleDuration
			cycleCooldownTime
			upcomingCycleCount
			cycleIssueAutoAssignStarted
			cycleIssueAutoAssignCompleted
			cycleLockToActive
			issueEstimationType
			issueEstimationAllowZero
			issueEstimationExtended
			defaultIssueEstimate
		}
	}
}
`,
		Variables: &__updateTeamInput{
			Input: input,
			Id:    id,
		},
	}
	var err error

	var data updateTeamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateTeamLabel(
	ctx context.Context,
	client graphql.Client,
	input IssueLabelUpdateInput,
	id string,
) (*updateTeamLabelResponse, error) {
	req := &graphql.Request{
		OpName: "updateTeamLabel",
		Query: `
mutation updateTeamLabel ($input: IssueLabelUpdateInput!, $id: String!) {
	issueLabelUpdate(input: $input, id: $id) {
		issueLabel {
			id
			name
			description
			color
			team {
				id
			}
		}
	}
}
`,
		Variables: &__updateTeamLabelInput{
			Input: input,
			Id:    id,
		},
	}
	var err error

	var data updateTeamLabelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateWorkflowState(
	ctx context.Context,
	client graphql.Client,
	input WorkflowStateUpdateInput,
	id string,
) (*updateWorkflowStateResponse, error) {
	req := &graphql.Request{
		OpName: "updateWorkflowState",
		Query: `
mutation updateWorkflowState ($input: WorkflowStateUpdateInput!, $id: String!) {
	workflowStateUpdate(input: $input, id: $id) {
		workflowState {
			id
			name
			description
			color
			type
			position
			team {
				id
			}
		}
	}
}
`,
		Variables: &__updateWorkflowStateInput{
			Input: input,
			Id:    id,
		},
	}
	var err error

	var data updateWorkflowStateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateWorkspaceLabel(
	ctx context.Context,
	client graphql.Client,
	input IssueLabelUpdateInput,
	id string,
) (*updateWorkspaceLabelResponse, error) {
	req := &graphql.Request{
		OpName: "updateWorkspaceLabel",
		Query: `
mutation updateWorkspaceLabel ($input: IssueLabelUpdateInput!, $id: String!) {
	issueLabelUpdate(input: $input, id: $id) {
		issueLabel {
			id
			name
			description
			color
		}
	}
}
`,
		Variables: &__updateWorkspaceLabelInput{
			Input: input,
			Id:    id,
		},
	}
	var err error

	var data updateWorkspaceLabelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
